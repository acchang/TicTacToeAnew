
function bestAIMove() {
    var smartAIArray = listEmptySpaces();
    let bestScore = -100000
    var move;
    for (var i = 0; i < smartAIArray.length; i++) {
      let smartAIpicked = smartAIArray[i];
      origBoard[smartAIpicked].classList.add(TWO_CLASS);
      origBoard[smartAIpicked].innerHTML = TWO_CLASS;
        let score = minimax(origBoard)
        origBoard[smartAIpicked].classList.remove(TWO_CLASS);
        origBoard[smartAIpicked].innerHTML = "";
    if (score > bestScore) {
      bestScore = score;
      move = smartAIpicked;
      console.log(move)
    } 
  }
  origBoard[move].classList.add(TWO_CLASS);
  origBoard[move].innerHTML = TWO_CLASS;
  }
  
  function minimax() {
  // minimax's role is to loop through and find the score
    if (playerhasWon() &&  playerOneTurn) {
      return -10;
    } else if (playerhasWon() && !playerOneTurn) {
      return 10;
    } else if (emptySpaceRemains() == false) {
      return 0;
    }
    swapTurns()
  // if we get a score from this, then it's a best score, [0] or smartAIpicked is the move
  // if no score the minimax moves on to the below
  
  // this recursive part is the problem
  // I don't know how to look steps ahead; might need to combine it with others' techniques
  
    if (!playerOneTurn) {
      let bestScore = -100000; 
      var smartAIArray = listEmptySpaces();
      for (var i = 0; i < smartAIArray.length; i++) {
        let smartAIpicked = smartAIArray[i];
        origBoard[smartAIpicked].classList.add(TWO_CLASS);
        origBoard[smartAIpicked].innerHTML = TWO_CLASS;
          let score = minimax(origBoard)
          origBoard[smartAIpicked].classList.remove(TWO_CLASS);
          origBoard[smartAIpicked].innerHTML = "";
          if (score > bestScore) {
            bestScore = score}
        }
      return bestScore;
      }
     else {
  // its now player 1 --
  
      let bestScore = 100000; 
      var smartAIArray = listEmptySpaces();
      for (var i = 0; i < smartAIArray.length; i++) {
        let smartAIpicked = smartAIArray[i];
  // starts from i of smartArray again, marked
        origBoard[smartAIpicked].classList.add(ONE_CLASS);
        origBoard[smartAIpicked].innerHTML = ONE_CLASS;
          let score = minimax(origBoard)
  // scored
        origBoard[smartAIpicked].classList.remove(ONE_CLASS);
        origBoard[smartAIpicked].innerHTML = "";
        if (score < bestScore) {
          bestScore = score}
        }
      return bestScore;
    }
  }
  
  
  
  
  
s  